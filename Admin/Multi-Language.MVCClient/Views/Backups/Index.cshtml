@model IEnumerable<Multi_Language.MVCClient.Models.UtilitiesViewModels.BackupViewModels>
@{
    ViewBag.Title = "Backups Page";
}
<!-- Default box -->
<div class="box box-success">
    <div class="box-header with-border">
        <h3 class="box-title">Current backups - @Model.Count()</h3>

        <div class="box-tools pull-right">
            <!-- Button trigger modal -->
            <button type="button" class="btn btn-success btn-xs" data-toggle="modal" data-target="#backupModal">
                Create Backup
            </button>
            <button type="button" class="btn btn-warning btn-xs" data-toggle="modal" data-target="#uploadBackupModal">
                Upload Backup
            </button>



            <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip" title="Collapse">
                <i class="fa fa-minus"></i>
            </button>
            <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                <i class="fa fa-times"></i>
            </button>
        </div>
    </div>
    <div class="box-body">
        <table class="table table-bordered table-hover table-striped dataTable">
            <thead>
            <tr>
                <th>
                    File name
                </th>
                <th>
                    File size
                </th>
                <th></th>
            </tr>
            </thead>
            <tfoot>
            <tr>
                <th>
                    File name
                </th>
                <th>
                    File size
                </th>
                <th></th>
            </tr>
            </tfoot>
            <tbody>
            @{
                int counter = 0;
            }
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.FileName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.FileSize)
                    </td>
                    <td>
                        <div class="btn-group-sm  pull-right">

                            @Ajax.RawActionLinkWithoutIcon("Download", "fa-globe", "Details", "Projects",
                                new { id = item.FileName }, new AjaxOptions { }, new { @class = "btn btn-success btn-xs" })

                            <button class="btn btn-primary btn-xs"
                                    data-toggle="collapse" data-target="#restore-@counter" aria-expanded="false" aria-controls="restore-@counter">
                                Restore
                            </button>

                            <button class="btn btn-danger btn-xs" onclick="DeleteBackup(this, '@item.FileName')">Delete</button>


                        </div>
                        <div class="clearfix"></div>
                        <div class="collapse" id="restore-@counter">
                            <div class="well">
                                Every change after this backup will be lost. Please confirm:
                                <div class="btn-group-sm">
                                    <button class="btn btn-default btn-xs"
                                            data-toggle="collapse" data-target="#restore-@counter" aria-expanded="false" aria-controls="restore-@counter">
                                        CLOSE
                                    </button>
                                    <button class="btn btn-primary btn-xs" onclick="RestoreBackup(this, '@item.FileName')"
                                            data-toggle="collapse" data-target="#restore-@counter" aria-expanded="false" aria-controls="restore-@counter">
                                        CONFIRM
                                    </button>

                                </div>

                            </div>
                        </div>
                    </td>

                </tr>
                counter++;
            }
            </tbody>

        </table>


    </div>
    <div class="overlay" id="loading-overlay" style="display: none"><i class="fa fa-refresh fa-spin"></i></div>

    <!-- /.box-body -->
    <div class="box-footer">

        <p class="col-md-4">
            <!-- Button trigger modal -->
            <button type="button" class="btn btn-success btn-flat" data-toggle="modal" data-target="#backupModal">
                Create Backup
            </button>
            <button type="button" class="btn btn-warning btn-flat" data-toggle="modal" data-target="#uploadBackupModal">
                Upload Backup
            </button>

        </p>


            <div class="alert alert-success alert-dismissible col-md-6 pull-right" role="alert" id="restore-alert-success" style="display: none">
                <button type="button" class="close" onclick="DissmisAlerRestore()"><span aria-hidden="true">&times;</span></button>
                <strong>Success!</strong> Database restored successfully.
            </div>

    </div>
    <!-- /.box-footer-->
</div>
<!-- /.box -->

<!-- Modal -->
<div class="modal fade modal-success" id="backupModal" tabindex="-1" role="dialog" aria-labelledby="backupModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="backupModalLabel">Create new backup</h4>
            </div>
            <div class="modal-body">
                <h5>
                    Add suffix to backup name.
                </h5>
                <label for="suffix">Template used for name:</label>
                <div class="input-group">
                    <span class="input-group-addon" id="basic-suffix">{ComputerName_AppName_Version_Date_Hour_Suffix}</span>
                    <input type="text" class="form-control" id="suffix" aria-describedby="basic-suffix">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline pull-left" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-outline" data-dismiss="modal" onclick="CreateBackup(this)">Save changes</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade modal-warning" id="uploadBackupModal" tabindex="-1" role="dialog" aria-labelledby="uploadBackupModal-label">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="uploadBackupModal-label">Modal title</h4>
            </div>
            <div class="modal-body">
                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline pull-left" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-outline" data-dismiss="modal" onclick="UploadBackup(this)">Save changes</button>
            </div>
        </div>
    </div>
</div>
<script>
    var baseAdressApi = '@System.Configuration.ConfigurationManager.AppSettings["MultiLanguageApiUrl"]';
    function CreateBackup(elem) {
        var url = baseAdressApi + '/backup/create/' + $('#suffix').val();
        $.ajax({
            url: url,
            type: 'POST',
            dataType: 'json',
            success: function (data, textStatus, xhr) {
                $('.sidebar-menu li a:contains("Backups")').click();
            },
            error: function (xhr, textStatus, errorThrown) {
                console.log(errorThrown);
            }
        });
    };

    function DeleteBackup(elem, fileName) {
        var parent = $(elem).parents().eq(2);
        var url = baseAdressApi + '/backup/delete/' + fileName +'/';
        $(parent).fadeTo(100, 0.4, function() {
            $.ajax({
                url: url,
                type: 'DELETE',
                dataType: 'json',
                success: function (data, textStatus, xhr) {
                    $(parent).hide(300);
                },
                error: function (xhr, textStatus, errorThrown) {
                    alert(textStatus);
                    $(parent).fadeTo(100, 1);
                }
            });
        });
        //$(parent).hide(300);
    };

    function UploadBackup(elem) {

    };

    function RestoreBackup(elem, fileName) {
        var url = baseAdressApi + '/backup/restore/' + fileName + '/';

        $("#loading-overlay").slideDown(100, function() {
            $.ajax({
                url: url,
                type: 'POST',
                dataType: 'json',
                success: function (data, textStatus, xhr) {
                    $("#loading-overlay").slideUp(100);
                    $("#restore-alert-success").slideDown(300);
                },
                error: function (xhr, textStatus, errorThrown) {
                    alert(textStatus);
                    $("#loading-overlay").slideUp(100);
                }
            });
        });
    };

    function DissmisAlerRestore() {
        $("#restore-alert-success").slideUp(300);

    };
</script>